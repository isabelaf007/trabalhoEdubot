/*
 versao 1 trabalho edubot
 algoritmo seguidor de parede
executa movimentos diferentes a cada run

//<<endl; Ã© quebra de linha

*/

#include <iostream>
#include "libs/EdubotLib.hpp"


using namespace std;
 
bool detecta_colisao(EdubotLib* edubotLib){
	return edubotLib->getBumper(0) || edubotLib->getBumper(1);
}

//vai pra frente enquanto seguir a parede a esquerda
void verifica_parede_esquerda(EdubotLib* edubotLib){
	while(edubotLib->getSonar(0) < 0.3){
		cout << "PAREDE A ESQUERDA" << endl;
	     edubotLib->move(0.2);
	     edubotLib->sleepMilliseconds(1000);
	     edubotLib->stop();

	     if(detecta_colisao(edubotLib)){
			return;
		}
	}
}

void ir_1_para_tras(EdubotLib* edubotLib){
	edubotLib->stop();
	edubotLib->sleepMilliseconds(1000);
	cout << "PAREDE A FRENTE" << endl;
	edubotLib->move(-0.07);  //vai p tras
	edubotLib->sleepMilliseconds(800);
	edubotLib->stop();
}

void ir_1_para_frente(EdubotLib* edubotLib){
	cout << "VAI PRA FRENTE" << endl;
	edubotLib->move(0.19);
	edubotLib->sleepMilliseconds(1000);
	edubotLib->stop();
	cout << "PARA" << endl;
}

void gira_direita(EdubotLib* edubotLib){
	 edubotLib->rotate(90);
	 edubotLib->sleepMilliseconds(1500);
}

void gira_esquerda(EdubotLib* edubotLib){
	    edubotLib->rotate(-90);
	    edubotLib->sleepMilliseconds(1500);
}


float getSonarFiltrado(EdubotLib* edubotLib, int sensorId, int numLeituras = 10) {
    float soma = 0;
    for (int i = 0; i < numLeituras; ++i) {
        soma += edubotLib->getSonar(sensorId);
        edubotLib->sleepMilliseconds(10);  // Pequeno atraso entre leituras
    }
    return soma / numLeituras;
}





int main(){

	EdubotLib *edubotLib = new EdubotLib();

	if(edubotLib->connect()){
		edubotLib->sleepMilliseconds(300);

		//encontrar parede a seguir
		while(!detecta_colisao(edubotLib)){
			edubotLib->move(0.2);
	          edubotLib->sleepMilliseconds(1000);
		}
		ir_1_para_tras(edubotLib);
		gira_direita(edubotLib);





		//loop principal
		while(edubotLib->isConnected()){
               verifica_parede_esquerda(edubotLib);
               
			if(detecta_colisao(edubotLib)){
				cout << "PAREDE A FRENTE" << endl;
				
				if(getSonarFiltrado(edubotLib, 0) <= 0.3){
					cout << "ESSEEEEEEEEEEEEEEEE" << endl;
					edubotLib->stop();
					edubotLib->sleepMilliseconds(1000);
					edubotLib->move(-0.07);  
					edubotLib->sleepMilliseconds(800);
					edubotLib->stop();
					gira_direita(edubotLib);
				}
				else{
					ir_1_para_tras(edubotLib);
					gira_direita(edubotLib);
				}
			}

			//se o caminho estiver livre a esquerda, virar a esquerda
			if(getSonarFiltrado(edubotLib, 0) > 0.4){
				gira_esquerda(edubotLib);
				ir_1_para_frente(edubotLib);
			}



//edubotLib->getSonar(0)






		}
		edubotLib->disconnect();
	}
	else{
		//std::
		cout << "NAO CONECTADO" << //std::
		endl; 
	}

	return 0;
}
