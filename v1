/*
 versao 1 trabalho edubot
 algoritmo seguidor de parede

//<<endl; Ã© quebra de linha

*/

#include <iostream>
#include "libs/EdubotLib.hpp"

using namespace std;
 
bool detecta_colisao(EdubotLib* edubotLib){
	return edubotLib->getBumper(0) || edubotLib->getBumper(1);
}

//vai pra frente enquanto seguir a parede a esquerda
void verifica_parede_esquerda(EdubotLib* edubotLib){
	while(edubotLib->getSonar(0) < 0.3){
	     edubotLib->move(0.2);
	     edubotLib->sleepMilliseconds(1500);
	     edubotLib->stop();
	     cout << "PAREDE A ESQUERDA" << endl;

		//caso de quina
	     if(detecta_colisao(edubotLib)){
			return;
		}
	}
}

void ir_1_para_tras(EdubotLib* edubotLib){
	edubotLib->stop();
	edubotLib->sleepMilliseconds(1000);
	cout << "PAREDE A FRENTE" << endl;
	edubotLib->move(-0.07);  //vai p tras
	edubotLib->sleepMilliseconds(800);
	edubotLib->stop();
	edubotLib->rotate(90);
	edubotLib->sleepMilliseconds(1500);
}

void ir_1_para_frente(EdubotLib* edubotLib){
	cout << "VAI PRA FRENTE" << endl;
	edubotLib->move(0.19);
	edubotLib->sleepMilliseconds(1000);
	edubotLib->stop();
	cout << "PARA" << endl;
}

void gira_direita_ou_esquerda(EdubotLib* edubotLib){
	//se o caminho estiver livre a esquerda, virar a esquerda
	if(edubotLib->getSonar(0) > 0.5){ 
	    edubotLib->rotate(-90);
	    edubotLib->sleepMilliseconds(1500);
	}

	//se o caminho estiver bloqueado a esquerda, virar a direita
	if(edubotLib->getSonar(0) <= 0.4){ 
	     edubotLib->rotate(90);
	     edubotLib->sleepMilliseconds(1500);
	}
}

int main(){
	
	EdubotLib *edubotLib = new EdubotLib();

	if(edubotLib->connect()){
		edubotLib->sleepMilliseconds(300);


		//encontra parede a seguir
		while(!detecta_colisao(edubotLib)){
			edubotLib->move(0.2);
               edubotLib->sleepMilliseconds(1000);
		}

	
		//teve colisao
		ir_1_para_tras(edubotLib);

		//segue parede
		verifica_parede_esquerda(edubotLib);
	     
		//vai um pouco pra frente
		ir_1_para_frente(edubotLib);

	
		gira_direita_ou_esquerda(edubotLib); //ARRUMAR


		verifica_parede_esquerda(edubotLib);

		if(detecta_colisao(edubotLib)){
			//valores diferentes da funcao ir para tras
			edubotLib->stop();
			edubotLib->sleepMilliseconds(1000);
			cout << "PAREDE A FRENTE" << endl;
			edubotLib->move(-0.09);  
			edubotLib->sleepMilliseconds(800);
			edubotLib->stop();

			gira_direita_ou_esquerda(edubotLib);
	
		}

		verifica_parede_esquerda(edubotLib);

		if(detecta_colisao(edubotLib)){
			ir_1_para_tras(edubotLib);
		}

		verifica_parede_esquerda(edubotLib);
		ir_1_para_frente(edubotLib);



		
		edubotLib->disconnect();
	}
	else{
		cout << "NAO CONECTADO" << endl; 
	}
	return 0;
}
